generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                       String                      @id @default(cuid())
  name                     String?
  email                    String?                     @unique
  emailVerified            DateTime?
  image                    String?
  role                     USER_ROLE                   @default(USER)
  active                   Boolean                     @default(true)
  accounts                 Account[]
  sessions                 Session[]
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  orders                   Order[]
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeCustomer           StripeCustomer?             @relation(fields: [stripeCustomerId], references: [id])
  stripeSubscription       StripeSubscription?         @relation(fields: [stripeSubscriptionId], references: [id])
  stripeSubscriptionStatus STRIPE_SUBSCRIPTION_STATUS? @default(incomplete)

  @@index([id])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  price       Float
  category    PRODUCT_CATEGORY
  description String           @db.Text
  image       String
  rating      Float            @default(0)
  quantity    Int              @default(1)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  items       OrderItem[]
}

// what does @db.Text do?

model Order {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  items     OrderItem[]
  archived  Boolean      @default(false)
  status    ORDER_STATUS @default(PENDING)

  @@index([userId])
}

model OrderItem {
  id        String       @id @default(cuid())
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  archived  Boolean      @default(false)
  status    ORDER_STATUS @default(PENDING)

  @@index([orderId])
  @@index([productId])
}

model StripeEvent {
  id              String   @id @default(cuid())
  apiVersion      String?
  data            String
  request         Json
  type            String
  object          String
  acount          String?
  livemode        Boolean
  pendingWebhooks Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model StripeCustomer {
  id                       String                     @id @default(cuid())
  stripeCustomerId         String
  stripeSubscriptionId     String
  stripeSubscriptionStatus STRIPE_SUBSCRIPTION_STATUS
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  User                     User[]
}

model StripeSubscription {
  id                       String                     @id @default(cuid())
  stripeSubscriptionId     String
  stripeSubscriptionStatus STRIPE_SUBSCRIPTION_STATUS
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  User                     User[]
}

enum USER_ROLE {
  ADMIN
  USER
}

enum PRODUCT_CATEGORY {
  ELECTRONICS
  JWELLERY
  MENS_CLOTHING
  WOMENS_CLOTHING
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum STRIPE_SUBSCRIPTION_STATUS {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}
