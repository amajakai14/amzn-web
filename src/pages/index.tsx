import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect } from "react";
import type { NextPageWithLayout } from "./_app";
import type { GetServerSideProps } from "next";
import type { Category, Product } from "@/types/globals";
import { getCategories, getProducts } from "@/utils/queryFns";
import { dehydrate, QueryClient, useQuery } from "@tanstack/react-query";

// components imports
import DefaultLayout from "@/components/layouts/DefaultLayout";
import Button from "@/components/Button";

type HomeProps = {
  products: Product[];
  categories: Category[];
};

const Home: NextPageWithLayout<HomeProps> = (props) => {
  const router = useRouter();
  useEffect(() => {
    router.push("/app");
  }, [router]);

  // tanstack/react-query
  const { data: products, status: productsStatus } = useQuery<Product[]>({
    queryKey: ["products"],
    queryFn: getProducts,
    initialData: props.products,
  });
  const { data: categories, status: categoriesStatus } = useQuery<Category[]>({
    queryKey: ["categories"],
    queryFn: getCategories,
    initialData: props.categories,
  });

  return (
    <>
      <Head>
        <title>Amzn Store</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-full flex-col items-center justify-center gap-7 px-2 sm:w-[95vw]">
        <h1 className="text-xl font-semibold md:text-3xl">
          Redirecting to the app page
        </h1>
        <Link href="/app">
          <Button aria-label="go to app page">Go to app</Button>
        </Link>
      </main>
    </>
  );
};

export default Home;

Home.getLayout = (page) => <DefaultLayout>{page}</DefaultLayout>;

export const getServerSideProps: GetServerSideProps = async () => {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery({
    queryKey: ["products"],
    queryFn: getProducts,
  });
  await queryClient.prefetchQuery({
    queryKey: ["categories"],
    queryFn: getCategories,
  });
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
